class MainActivity
    {
        
            






public void version()
{
    runCommand.set("ver");
    printListOfStrings();
}

public void printListOfStrings()
{
    for (int i = 0; i < GlobalVars.getInstance().getListOfStrings().size(); i++)
    {
        String temp = GlobalVars.getInstance().getListOfStrings().get(i).toString();
        addStringToCommandWindow(temp);
    }
    GlobalVars.getInstance().listOfStrings.clear();
}

public void printOk()
{
    String[] lines = commandWindow.getText().toString().split("\n");
    if (lines.length > 2)
        if (GlobalVars.getInstance().getIsOkSet() && !GlobalVars.getInstance().getRun())
        {
            addStringToCommandWindow("Ok\n");
        }
    GlobalVars.getInstance().setIsOkSet(true);
}

public void addStringToCommandWindow(String string)
{
    String temp = commandWindow.getText().toString() + string;
    commandWindow.setText(temp, TextView.BufferType.EDITABLE);
    commandWindow.setSelection(commandWindow.getText().length());
}

public int detectColor(int colorNumber)
{
    // Debug.WriteLine(TAG, "± Color # " + colorNumber);
    int result = Color.WHITE;
    if (colorNumber == 1) result = Color.BLACK;
    if (colorNumber == 2) result = Color.parseColor("#00E100");
    if (colorNumber == 3) result = Color.parseColor("#27FF62");
    if (colorNumber == 4) result = Color.parseColor("#0836A0");
    if (colorNumber == 5) result = Color.parseColor("#5B60FF");
    if (colorNumber == 6) result = Color.parseColor("#C50023");
    if (colorNumber == 7) result = Color.parseColor("#0EDFFF");
    if (colorNumber == 8) result = Color.parseColor("#FF0019");
    if (colorNumber == 9) result = Color.parseColor("#FF6372");
    if (colorNumber == 10) result = Color.parseColor("#D7E300");
    if (colorNumber == 11) result = Color.parseColor("#CAD186");
    if (colorNumber == 12) result = Color.parseColor("#009507");
    if (colorNumber == 13) result = Color.parseColor("#DA0FB1");
    if (colorNumber == 14) result = Color.parseColor("#ADADAD");
    if (colorNumber == 15) result = Color.parseColor("#FFFFFF");
    if (colorNumber > 15)
    {

        GlobalVars.getInstance().setError("Incorrect color");
        //Debug.WriteLine(TAG, "± Incorrect color\n");
    }
    return result;
}

public void returnCR()
{
    addStringToCommandWindow("Ok\n");
}

public void otherCommands(String commandRun) throws IOException
{
    String str = commandRun;
    commandRun = commandRun.split(" ")[0];
        for (int i = 0; i < GlobalVars.getInstance().listOfAll.size(); i++) {
        //Debug.WriteLine(TAG, "± listOfAll" + GlobalVars.getInstance().listOfAll.get(i));
        NSRange range = new NSRange(commandRun.indexOf(GlobalVars.getInstance().listOfAll.get(i).toString()), commandRun.length());
        if (range.location != NSNotFound && range.location == 0)
        {
            commandRun = GlobalVars.getInstance().listOfAll.get(i).toString();
            Debug.WriteLine(TAG, "± Command found! '%@'" + commandRun);
        }
    }
        if (commandRun.equalsIgnoreCase("cls")) {
        commandWindow.setText(null);
    } else if (commandRun.equalsIgnoreCase("load")) {
        OpenFileDialog fileDialog = new OpenFileDialog(this)
                .setFilter(".*\\.bas")
                .setOpenDialogListener(new OpenFileDialog.OpenDialogListener() {
                        @Override
                        public void OnSelectedFile(String fileName) throws IOException
{
    Toast.makeText(getApplicationContext(), fileName, Toast.LENGTH_LONG).show();
    GlobalVars.getInstance().setFileName(fileName);
    reset();
    String arrayText = readFileAsString(fileName);
    Debug.WriteLine(TAG, "± readFileAsString " + arrayText);
    GlobalVars.getInstance().listOfProgram = new ArrayList<String>(Arrays.asList(arrayText.split("\n")));
                            GlobalVars.getInstance().programCounter = Integer.parseInt(runCommand.returnBaseCommand(GlobalVars.getInstance().listOfProgram.get(GlobalVars.getInstance().listOfProgram.size() - 1).toString()) + GlobalVars.getInstance().autoStep);

                        }
                    });
            fileDialog.show();
        } else if (commandRun.equalsIgnoreCase("reset")) {
            reset();
        } else if (commandRun.equalsIgnoreCase("beep")) {
            beepPlay();
        } else if (commandRun.equalsIgnoreCase("color")) {
            str = str.replace("color", "");
            str = str.replace(" ", "");
            String foreground = str.split(",")[0];
            if (!foreground.isEmpty()) setColor(foreground);
            if (str.contains(",")) setBackground(str.split(",")[1]);
        } else if (commandRun.equalsIgnoreCase("run")) {
            if (GlobalVars.getInstance().listOfProgram.size() > 0) {
                Debug.WriteLine(TAG, "± start running program");
                nextCommand = YES;
                GlobalVars.getInstance().runIndex = 0;
                GlobalVars.getInstance().run = YES;
                GlobalVars.getInstance().error = "";
                runProgram();
            }
        } else if (commandRun.equalsIgnoreCase("share") && !GlobalVars.getInstance().run) {
            share();
        } else if (commandRun.equalsIgnoreCase("if") && GlobalVars.getInstance().error.isEmpty()) {
            Debug.WriteLine(TAG, "± if in progress on ViewController. " + GlobalVars.getInstance().commandIf);
            if (!GlobalVars.getInstance().commandIf.isEmpty()) {
                if (runCommand.set(GlobalVars.getInstance().commandIf)) {
                    for (int n = 0; n<GlobalVars.getInstance().listOfStrings.size(); n++) {
                        addStringToCommandWindow(GlobalVars.getInstance().listOfStrings.get(n).toString());
                    }
                } else {
                    otherCommands(GlobalVars.getInstance().commandIf);
                }
            }
        } else if (commandRun.equalsIgnoreCase("input") && GlobalVars.getInstance().error.isEmpty()) {
            nextCommand = NO;
            if (GlobalVars.getInstance().listOfStrings.size() > 0) {
                addStringToCommandWindow(GlobalVars.getInstance().listOfStrings.get(0).toString());
                // returnCR];
            }
            addStringToCommandWindow("? ");
            GlobalVars.getInstance().isOkSet = NO;
            inputMode = YES;
        } else {
            syntaxError();
        }
        Debug.WriteLine(TAG, "± commandRun=" + commandRun);
    }

    private static String readFileAsString(String filePath) throws IOException
{
    DataInputStream dis = new DataInputStream(new FileInputStream(filePath));
        try {
            long len = new File(filePath).length();
            if (len > Integer.MAX_VALUE)
                throw new IOException("File " + filePath + " too large, was " + len + " bytes.");
byte[] bytes = new byte[(int)len];
dis.readFully(bytes);
            return new String(bytes, "UTF-8");
        } finally {
            dis.close();
        }
    }

    public void syntaxError()
{
    GlobalVars.getInstance().isOkSet = NO;
    if (GlobalVars.getInstance().run)
    {
        GlobalVars.getInstance().error = GlobalVars.getInstance().error + " at line " + GlobalVars.getInstance().runnedLine + "\n";
    }
    stopRunning();
    addStringToCommandWindow(GlobalVars.getInstance().error);
}

public void stopRunning()
{
    printOk();
    handler.removeCallbacks(null);
    GlobalVars.getInstance().runIndex = 0;
    GlobalVars.getInstance().run = NO;
    GlobalVars.getInstance().isOkSet = YES;
    inputMode = NO;
    //GlobalVars.getInstance().scanKeyOn = NO;
    Debug.WriteLine(TAG, "Program is OVER!!!!! " + GlobalVars.getInstance().error);
}

public void setBackground(String color)
{
    int col = 1;
    try
    {
        col = Integer.parseInt(color);
    }
    catch (NumberFormatException e)
    {
        Debug.WriteLine(TAG, "± color=" + color + "Wrong number format in string$!");
    }
    commandWindow.setBackgroundColor(detectColor(col));
}

public void setColor(String color)
{
    int col = 1;
    try
    {
        col = Integer.parseInt(color);
    }
    catch (NumberFormatException e)
    {
        Debug.WriteLine(TAG, "± Background color=" + color + "Wrong number format in string$!");
    }
    commandWindow.setTextColor(detectColor(col));
}

public void runProgram() throws IOException
{
        if (nextCommand) {
        String untilSpace = GlobalVars.getInstance().listOfProgram.get(GlobalVars.getInstance().runIndex).toString().split(" ")[0];
        GlobalVars.getInstance().runnedLine = untilSpace;
        int indexforAfterSpace = untilSpace.length();
        String commandRun = GlobalVars.getInstance().listOfProgram.get(GlobalVars.getInstance().runIndex).toString().substring(indexforAfterSpace + 1);
        if (commandRun.substring(0, 1).equals(" "))
        {
            commandRun = normaStr.removeSpaceInBegin(commandRun);
        }
        Debug.WriteLine(TAG, "± " + GlobalVars.getInstance().runIndex + " Command '" + commandRun + "'");
        if (!commandRun.equals(""))
        {
            if (runCommand.set(commandRun))
            {
                for (int n = 0; n < GlobalVars.getInstance().listOfStrings.size(); n++)
                {
                    addStringToCommandWindow(GlobalVars.getInstance().listOfStrings.get(n).toString());
                }
            }
            else {
                otherCommands(commandRun);
            }
        }
        GlobalVars.getInstance().runIndex++;
        if (GlobalVars.getInstance().runIndex >= GlobalVars.getInstance().listOfProgram.size()) stopRunning();
        if (!GlobalVars.getInstance().error.equals("")) stopRunning();
        if (!GlobalVars.getInstance().run) stopRunning();
    }
        if (GlobalVars.getInstance().run) handler.postDelayed(new Runnable()
{
    @Override
            public void run()
{
    //Do something after 100ms
    try
    {
        runProgram();
    }
    catch (IOException e)
    {
        e.printStackTrace();
    }
}
        }, 10);
        //  runTimer = [NSTimer scheduledTimerWithTimeInterval:0.01 target:self selector:@selector(runProgram) userInfo:nil repeats:NO];
    }

    public void share()
{
    /*
            NSURL* fn=fileToURL:GlobalVars.getInstance().fileName];
            NSLog(@"shareCommand for '%@'",GlobalVars.getInstance().fileName);
            NSString *texttoshare = @"MCX Basic file. Sent by share command.";
            //    String listToShare = [GlobalVars.getInstance().listOfProgram componentsJoinedByString: @"\n"];
            NSArray *activityItems = @[texttoshare,fn];
            UIActivityViewController *activityVC = [[UIActivityViewController alloc] initWithActivityItems:activityItems applicationActivities:nil];
            NSLog(@"share step 2");

            //if iPhone
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                presentViewController:activityVC animated:YES completion:nil];
            }
            //if iPad
            else {
                // Change Rect to position Popover
                UIPopoverController *popup = [[UIPopoverController alloc] initWithContentViewController:activityVC];
                [popup presentPopoverFromRect:CGRectMake(self.view.frame.size.width/2, self.view.frame.size.height/4, 0, 0)inView:self.view permittedArrowDirections:UIPopoverArrowDirectionAny animated:YES];
            }
            */
}

public void listColor()

{
    /*
    GlobalVars.getInstance() =[GlobalVars sharedInstance];
    digitalFunc =[[DigitalFunc alloc]init];
    NSCharacterSet * alphaSet =[[NSCharacterSet characterSetWithCharactersInString:@
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLKMNOPQRSTUVWXYZ"]invertedSet];
    NSString * string =[commandWindow text].lowercaseString;
    NSMutableArray * arrayOfRanges =[[NSMutableArray alloc]init];
    NSMutableArray * arrayOfRangesText =[[NSMutableArray alloc]init];
    NSMutableArray * arrayOfRangesNumber =[[NSMutableArray alloc]init];

    for (int i = 0; i <[GlobalVars.getInstance().listOfAll count];
    i++){
    //NSRange searchRange = NSMakeRange(0,string.length);
    //NSRange searchRange = getViewableRange:commandWindow];
    NSRange searchRange = NSMakeRange(textIndex, string.length - textIndex);
    NSRange foundRange;
    while (searchRange.location < string.length) {
        searchRange.length = string.length - searchRange.location;
        foundRange =[string rangeOfString(GlobalVars.getInstance().listOfAll.get(i]options:
        0 range:
        searchRange];
        if (foundRange.location != NSNotFound) {
            // found an occurrence of the substring! do stuff here
            searchRange.location = foundRange.location + foundRange.length;
            bool prevEmpty = YES;
            bool afterEmpty = YES;
            if (foundRange.location + foundRange.length < string.length - 1) {
                NSString * tmp =[string substringWithRange:
                NSMakeRange(foundRange.location + foundRange.length, 1)];
                //                    NSLog(@"colorWord ->%@",tmp);
                if ([tmp rangeOfCharacterFromSet:alphaSet].location == NSNotFound)
                prevEmpty = NO;
            }
            if (foundRange.location > 0) {
                NSString * tmp =[string substringWithRange:
                NSMakeRange(foundRange.location - 1, 1)];
                if ([tmp rangeOfCharacterFromSet:alphaSet].location == NSNotFound)
                prevEmpty = NO;
            }
            if (prevEmpty && afterEmpty) {
                [arrayOfRanges addObject(NSValue valueWithRange:foundRange]];
            }
        } else {
            // no more substring to find
            break;
        }
    }
}

    NSRange searchRange = NSMakeRange(textIndex, string.length - textIndex);
    NSLog( @ "searchRange = %@", NSStringFromRange(searchRange));
    int counter = textIndex;
    NSArray * lines =[[string substringWithRange:searchRange]componentsSeparatedByString:@ "\n"];
    for (int i = 0; i <[lines count];
    i++){

    NSString * base =returnBaseCommand(lines.get(i]];
    if ([digitalFunc isOnlyDigits:base]&&![base isEqual:@ ""]){ // manual program string set
        [arrayOfRangesNumber addObject(NSValue valueWithRange:
        NSMakeRange(counter, base.length)]];
    }

    int indexFirst = 0;
    BOOL foundFirst = NO;
    NSString * lineString =[lines.get(i];
    if (lineString.length > 0) {
        for (int i = 0; i <[lineString length];
        i++){
            if ([lineString characterAtIndex:i]=='"' && !foundFirst){
                foundFirst = YES;
                indexFirst = i;
            }
            if ([lineString characterAtIndex:i]=='"' && foundFirst && indexFirst != i){
                foundFirst = NO;
                NSRange range = NSMakeRange(counter + indexFirst, i - indexFirst + 1);
                [arrayOfRangesText addObject(NSValue valueWithRange:range]];
            }
        }
    }

    counter = counter + (int)[[lines.get(i]length]+1;
}

    if ([arrayOfRanges count]>0){

    NSMutableAttributedString * stringM =[[NSMutableAttributedString alloc]initWithString:
    commandWindow.text];
    [stringM addAttribute:NSForegroundColorAttributeName value:colorWithHexString:@
    "FFFFFF"]range:
    NSMakeRange(0, string.length)];
    [stringM addAttribute:NSFontAttributeName value(UIFont fontWithName:@ "Menlo" size:
    16.0]range:
    NSMakeRange(0, string.length)];

    for (int i = 0; i <[arrayOfRanges count];
    i++)
    [stringM addAttribute:NSForegroundColorAttributeName value:colorWithHexString:@
    "8EE67C"]range([arrayOfRanges.get(i]rangeValue]];

    for (int i = 0; i <[arrayOfRangesText count];
    i++)
    [stringM addAttribute:NSForegroundColorAttributeName value:colorWithHexString:@
    "DED27C"]range([arrayOfRangesText.get(i]rangeValue]];

    for (int i = 0; i <[arrayOfRangesNumber count];
    i++)
    [stringM addAttribute:NSForegroundColorAttributeName value:colorWithHexString:@
    "ADADAD"]range([arrayOfRangesNumber.get(i]rangeValue]];

    [commandWindow setAttributedText:stringM];
}
*/
}

/*

    - (void)keyboardDidShow: (NSNotification *) notif{
        // Do something here
        //    NSLog(@"keyboardDidShow!!!");
        moveTextViewForKeyboard:notif up:YES];
    }

    - (void)keyboardDidHide: (NSNotification *) notif{
        // Do something here
        //     NSLog(@"keyboardDidHide!!!");
    }

    - (void)viewWillDisappear:(BOOL)animated
    {
        [[NSNotificationCenter defaultCenter] removeObserver:self];
    }

    - (void)moveTextViewForKeyboard:(NSNotification*)aNotification up:(BOOL)up {

        NSDictionary* userInfo = [aNotification userInfo];
        NSTimeInterval animationDuration;
        UIViewAnimationCurve animationCurve;
        CGRect keyboardEndFrame;

        [[userInfo objectForKey:UIKeyboardAnimationCurveUserInfoKey] getValue:&animationCurve];
        [[userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey] getValue:&animationDuration];
        [[userInfo objectForKey:UIKeyboardFrameEndUserInfoKey] getValue:&keyboardEndFrame];

        [UIView beginAnimations:nil context:nil];
        [UIView setAnimationDuration:animationDuration];
        [UIView setAnimationCurve:animationCurve];

        CGRect newFrame = commandWindow.frame;
        CGRect keyboardFrame = [self.view convertRect:keyboardEndFrame toView:nil];
        keyboardFrame.size.height -= tabBarController.tabBar.frame.size.height;
        newFrame.size.height -= keyboardFrame.size.height * (up?1:-1);
        commandWindow.frame = newFrame;


        if (up) {
            keyOffset=keyboardFrame.size.height;
            //         NSLog(@"keyboard UP!!! %d",keyOffset);
        } else {
            keyOffset=0;
            //         NSLog(@"keyboard HIDE!!! %d",keyOffset);
        }
        initScreenSize];
        [UIView commitAnimations];
    }

    - (void)keyboardWillShown:(NSNotification*)aNotification
    {
        moveTextViewForKeyboard:aNotification up:YES];
    }

    - (void)keyboardWillHide:(NSNotification*)aNotification
    {
        moveTextViewForKeyboard:aNotification up:NO];
    }

    -(void)viewWillAppear:(BOOL)animated{
        [[NSNotificationCenter defaultCenter] addObserver:self  selector:@selector(orientationChanged:)    name:UIDeviceOrientationDidChangeNotification  object:nil];
    }

    - (void)orientationChanged:(NSNotification *)notification{
        adjustViewsForOrientation([UIApplication sharedApplication] statusBarOrientation]];
    }

    - (void) adjustViewsForOrientation:(UIInterfaceOrientation) orientation {

        switch (orientation)
        {
            case UIInterfaceOrientationPortrait:
            case UIInterfaceOrientationPortraitUpsideDown:
            {
                //load the portrait view
                //            NSLog(@"Portrait!!!");
                initScreenSize];
            }

            break;
            case UIInterfaceOrientationLandscapeLeft:
            case UIInterfaceOrientationLandscapeRight:
            {
                //load the landscape view
                //            NSLog(@"Lanscape!!!");
                initScreenSize];
            }
            break;
            case UIInterfaceOrientationUnknown:break;
        }
    }

    - (void) initScreenSize
    {
        screenSize=self.view.frame.size;
        CGRect newFrame = commandWindow.frame;
        newFrame.size = CGSizeMake(screenSize.width*0.98, screenSize.height*0.96-keyOffset);
        newFrame.origin = CGPointMake(screenSize.width*0.01, screenSize.height*0.02);
        commandWindow.frame=newFrame;
    }

    - (void)viewDidLoad {
        [super viewDidLoad];
        // Do any additional setup after loading the view, typically from a nib.

        [super viewDidLoad];
        NSLog(@"init");
        inputMode = NO;
        inputCount = 0;
        keyOffset=0;
        
        runCommand = [[RunCommand alloc] init];
        setBackground:detectColor:@"4"]];
        setColor:detectColor:@"15"]];
        commandWindow.delegate=self;

        // Create a swipe gesture recogniser
        UISwipeGestureRecognizer *recogniser = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipe:)];
        recogniser.direction = UISwipeGestureRecognizerDirectionLeft | UISwipeGestureRecognizerDirectionRight; // add other directions if needed
        // Add the swipe gesture recogniser to the text view
        [commandWindow addGestureRecognizer:recogniser];

        UISwipeGestureRecognizer *swipeGestureDown = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(downSwipeGesture:)];
        swipeGestureDown.direction = UISwipeGestureRecognizerDirectionDown;
        [commandWindow addGestureRecognizer:swipeGestureDown];

        UISwipeGestureRecognizer *swipeGestureUp = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(upSwipeGesture:)];
        swipeGestureUp.direction = UISwipeGestureRecognizerDirectionUp;
        [commandWindow addGestureRecognizer:swipeGestureUp];

        UISwipeGestureRecognizer *swipeGestureRight = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(rightSwipeGesture:)];
        swipeGestureRight.direction = UISwipeGestureRecognizerDirectionRight;
        [commandWindow addGestureRecognizer:swipeGestureRight];

        UISwipeGestureRecognizer *swipeGestureLeft = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(leftSwipeGesture:)];
        swipeGestureLeft.direction = UISwipeGestureRecognizerDirectionLeft;
        [commandWindow addGestureRecognizer:swipeGestureLeft];

        [commandWindow setTextColor(UIColor whiteColor]];
        [commandWindow setFont(UIFont fontWithName:@"Menlo" size:16]];
        version];
        printOk];
        [commandWindow becomeFirstResponder];
    }


    - (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
        BOOL shouldChangeText = YES;

        GlobalVars.getInstance().keyScan=text;
        if (!GlobalVars.getInstance().scanKeyOn) {shouldChangeText = YES;}else{shouldChangeText = NO;}

        if ([text isEqualToString:@"\n"] && !GlobalVars.getInstance().scanKeyOn) {
            NSLog(@"Return pressed");
            textIndex=(int)commandWindow.text.length;
            // return key
            NSArray *lines = [commandWindow.text componentsSeparatedByString:@"\n"];
            NSRange range = textView.selectedRange;
            NSString * firstHalfString = [commandWindow.text substringToIndex:range.location];
            NSArray *arrLines = [firstHalfString componentsSeparatedByString:@"\n"];
            GlobalVars.getInstance().lineNumber = [arrLines count]-1;
            GlobalVars.getInstance().command = [lines.get(GlobalVars.getInstance().lineNumber];
            NSLog(@"command %@",GlobalVars.getInstance().command);

            if (inputMode){
                if (![GlobalVars.getInstance().input isEqual:@""])
                {
                    int extrAdd=2;
                    if ([GlobalVars.getInstance().listOfStrings count]==0) {
                    [GlobalVars.getInstance().listOfStrings addObject:@"t"];
                    extrAdd=1;
                }
                    NSLog(@"input mode ='%@' listofstring0='%@'",GlobalVars.getInstance().input,[GlobalVars.getInstance().listOfStrings.get(0]);
                    NSArray *arr = [[GlobalVars.getInstance().input substringFromIndex:1] componentsSeparatedByCharactersInSet(NSCharacterSet characterSetWithCharactersInString:@","]];
                    String entered;
                    NSInteger indexInput=[[GlobalVars.getInstance().listOfStrings.get(0]length]+extrAdd;
                    NSLog(@"input-- '%@' indexed-'%@'",[lines lastObject],[GlobalVars.getInstance().listOfStrings.get(0]);
                    entered=[[lines lastObject] substringFromIndex:indexInput];
                    String str=[NSString stringWithFormat:@"%@=%@",[arr.get(inputCount],entered];
                    if ([[[arr.get(inputCount] substringFromIndex([arr.get(inputCount] length] - 1] isEqual:@"$"])
                    str=[NSString stringWithFormat:@"%@=\"%@\"",[arr.get(inputCount],entered];

                    [runCommand set:str];
                    inputCount++;
                    if (inputCount>=[arr count]) {
                    returnCR];
                    inputMode=NO;
                    inputCount=0;
                    nextCommand=YES;
                } else {
                    returnCR];
                    addStringToCommandWindow:@"? "];
                }
                } else {
                    returnCR];
                    inputMode=NO;
                    inputCount=0;
                    syntaxError];
                    nextCommand=YES;
                }
                // return YES;
            } else {
                if (![GlobalVars.getInstance().command isEqual:@""]){

                    //int l=0;
                    //if (GlobalVars.getInstance().command.length>3) l=4;
                    if (GlobalVars.getInstance().isOkSet) returnCR];
                    if (!GlobalVars.getInstance().autoSet) {
                        if ([runCommand set:GlobalVars.getInstance().command])
                        {
                            [commandWindow resignFirstResponder];
                            for (int i=0; i<[GlobalVars.getInstance().listOfStrings count]; i++) {
                            addStringToCommandWindow(GlobalVars.getInstance().listOfStrings.get(i]];
                        }
                            [commandWindow becomeFirstResponder];
                            if (!GlobalVars.getInstance().autoSet || !GlobalVars.getInstance().run) printOk];
                        }else{
                            otherCommands:GlobalVars.getInstance().command];
                            printOk];
                        }
                    }else{

                        [runCommand autoProgramSet:GlobalVars.getInstance().command];
                        for (int i=0; i<[GlobalVars.getInstance().listOfStrings count]; i++) {
                            addStringToCommandWindow(GlobalVars.getInstance().listOfStrings.get(i]];
                        }

                    }
                    if ([GlobalVars.getInstance().command length]>3)
                    if ([[GlobalVars.getInstance().command substringToIndex:4] isEqual:@"list"]) listColor];

                    //  return YES;

                }
            }
            shouldChangeText = NO;
        } else {
            //        NSLog(@"Other pressed");
        }
        if ([GlobalVars.getInstance().command isEqual:@""]) shouldChangeText = YES;
        return shouldChangeText;
    }

    - (void)textViewDidChange:(UITextView *)textView
    {
        CGRect caret = [commandWindow caretRectForPosition:commandWindow.selectedTextRange.end];
        [commandWindow scrollRectToVisible:caret animated:YES];
    }

    - (void)didReceiveMemoryWarning {
        [super didReceiveMemoryWarning];
        // Dispose of any resources that can be recreated.
    }





    - (NSURL *) fileToURL:(String)filename
    {
        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
        NSString *documentsDirectory = [paths.get(0]; // Get documents directory

        NSLog(@"filename='%@'",filename);
        NSString *filePath = [documentsDirectory stringByAppendingPathComponent:filename];
        NSLog(@"filePath='%@'",filePath);
        NSLog(@"fileURLWithPath='%@'",[NSURL fileURLWithPath:filePath]);

        return [NSURL fileURLWithPath(filePath substringFromIndex:1]];
    }


*/