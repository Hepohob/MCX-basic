class MainActivity
    {
        
      

/*

    - (void)keyboardDidShow: (NSNotification *) notif{
        // Do something here
        //    NSLog(@"keyboardDidShow!!!");
        moveTextViewForKeyboard:notif up:YES];
    }

    - (void)keyboardDidHide: (NSNotification *) notif{
        // Do something here
        //     NSLog(@"keyboardDidHide!!!");
    }

    - (void)viewWillDisappear:(BOOL)animated
    {
        [[NSNotificationCenter defaultCenter] removeObserver:self];
    }

    - (void)moveTextViewForKeyboard:(NSNotification*)aNotification up:(BOOL)up {

        NSDictionary* userInfo = [aNotification userInfo];
        NSTimeInterval animationDuration;
        UIViewAnimationCurve animationCurve;
        CGRect keyboardEndFrame;

        [[userInfo objectForKey:UIKeyboardAnimationCurveUserInfoKey] getValue:&animationCurve];
        [[userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey] getValue:&animationDuration];
        [[userInfo objectForKey:UIKeyboardFrameEndUserInfoKey] getValue:&keyboardEndFrame];

        [UIView beginAnimations:nil context:nil];
        [UIView setAnimationDuration:animationDuration];
        [UIView setAnimationCurve:animationCurve];

        CGRect newFrame = commandWindow.frame;
        CGRect keyboardFrame = [self.view convertRect:keyboardEndFrame toView:nil];
        keyboardFrame.size.height -= tabBarController.tabBar.frame.size.height;
        newFrame.size.height -= keyboardFrame.size.height * (up?1:-1);
        commandWindow.frame = newFrame;


        if (up) {
            keyOffset=keyboardFrame.size.height;
            //         NSLog(@"keyboard UP!!! %d",keyOffset);
        } else {
            keyOffset=0;
            //         NSLog(@"keyboard HIDE!!! %d",keyOffset);
        }
        initScreenSize];
        [UIView commitAnimations];
    }

    - (void)keyboardWillShown:(NSNotification*)aNotification
    {
        moveTextViewForKeyboard:aNotification up:YES];
    }

    - (void)keyboardWillHide:(NSNotification*)aNotification
    {
        moveTextViewForKeyboard:aNotification up:NO];
    }

    -(void)viewWillAppear:(BOOL)animated{
        [[NSNotificationCenter defaultCenter] addObserver:self  selector:@selector(orientationChanged:)    name:UIDeviceOrientationDidChangeNotification  object:nil];
    }

    - (void)orientationChanged:(NSNotification *)notification{
        adjustViewsForOrientation([UIApplication sharedApplication] statusBarOrientation]];
    }

    - (void) adjustViewsForOrientation:(UIInterfaceOrientation) orientation {

        switch (orientation)
        {
            case UIInterfaceOrientationPortrait:
            case UIInterfaceOrientationPortraitUpsideDown:
            {
                //load the portrait view
                //            NSLog(@"Portrait!!!");
                initScreenSize];
            }

            break;
            case UIInterfaceOrientationLandscapeLeft:
            case UIInterfaceOrientationLandscapeRight:
            {
                //load the landscape view
                //            NSLog(@"Lanscape!!!");
                initScreenSize];
            }
            break;
            case UIInterfaceOrientationUnknown:break;
        }
    }

    - (void) initScreenSize
    {
        screenSize=self.view.frame.size;
        CGRect newFrame = commandWindow.frame;
        newFrame.size = CGSizeMake(screenSize.width*0.98, screenSize.height*0.96-keyOffset);
        newFrame.origin = CGPointMake(screenSize.width*0.01, screenSize.height*0.02);
        commandWindow.frame=newFrame;
    }

    - (void)viewDidLoad {
        [super viewDidLoad];
        // Do any additional setup after loading the view, typically from a nib.

        [super viewDidLoad];
        NSLog(@"init");
        inputMode = NO;
        inputCount = 0;
        keyOffset=0;
        
        runCommand = [[RunCommand alloc] init];
        setBackground:detectColor:@"4"]];
        setColor:detectColor:@"15"]];
        commandWindow.delegate=self;

        // Create a swipe gesture recogniser
        UISwipeGestureRecognizer *recogniser = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipe:)];
        recogniser.direction = UISwipeGestureRecognizerDirectionLeft | UISwipeGestureRecognizerDirectionRight; // add other directions if needed
        // Add the swipe gesture recogniser to the text view
        [commandWindow addGestureRecognizer:recogniser];

        UISwipeGestureRecognizer *swipeGestureDown = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(downSwipeGesture:)];
        swipeGestureDown.direction = UISwipeGestureRecognizerDirectionDown;
        [commandWindow addGestureRecognizer:swipeGestureDown];

        UISwipeGestureRecognizer *swipeGestureUp = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(upSwipeGesture:)];
        swipeGestureUp.direction = UISwipeGestureRecognizerDirectionUp;
        [commandWindow addGestureRecognizer:swipeGestureUp];

        UISwipeGestureRecognizer *swipeGestureRight = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(rightSwipeGesture:)];
        swipeGestureRight.direction = UISwipeGestureRecognizerDirectionRight;
        [commandWindow addGestureRecognizer:swipeGestureRight];

        UISwipeGestureRecognizer *swipeGestureLeft = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(leftSwipeGesture:)];
        swipeGestureLeft.direction = UISwipeGestureRecognizerDirectionLeft;
        [commandWindow addGestureRecognizer:swipeGestureLeft];

        [commandWindow setTextColor(UIColor whiteColor]];
        [commandWindow setFont(UIFont fontWithName:@"Menlo" size:16]];
        version];
        printOk];
        [commandWindow becomeFirstResponder];
    }


    - (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
        BOOL shouldChangeText = YES;

        GlobalVars.getInstance().keyScan=text;
        if (!GlobalVars.getInstance().scanKeyOn) {shouldChangeText = YES;}else{shouldChangeText = NO;}

        if ([text isEqualToString:@"\n"] && !GlobalVars.getInstance().scanKeyOn) {
            NSLog(@"Return pressed");
            textIndex=(int)commandWindow.text.length;
            // return key
            NSArray *lines = [commandWindow.text componentsSeparatedByString:@"\n"];
            NSRange range = textView.selectedRange;
            NSString * firstHalfString = [commandWindow.text substringToIndex:range.location];
            NSArray *arrLines = [firstHalfString componentsSeparatedByString:@"\n"];
            GlobalVars.getInstance().lineNumber = [arrLines count]-1;
            GlobalVars.getInstance().command = [lines.get(GlobalVars.getInstance().lineNumber];
            NSLog(@"command %@",GlobalVars.getInstance().command);

            if (inputMode){
                if (![GlobalVars.getInstance().input isEqual:@""])
                {
                    int extrAdd=2;
                    if ([GlobalVars.getInstance().listOfStrings count]==0) {
                    [GlobalVars.getInstance().listOfStrings addObject:@"t"];
                    extrAdd=1;
                }
                    NSLog(@"input mode ='%@' listofstring0='%@'",GlobalVars.getInstance().input,[GlobalVars.getInstance().listOfStrings.get(0]);
                    NSArray *arr = [[GlobalVars.getInstance().input substringFromIndex:1] componentsSeparatedByCharactersInSet(NSCharacterSet characterSetWithCharactersInString:@","]];
                    String entered;
                    NSInteger indexInput=[[GlobalVars.getInstance().listOfStrings.get(0]length]+extrAdd;
                    NSLog(@"input-- '%@' indexed-'%@'",[lines lastObject],[GlobalVars.getInstance().listOfStrings.get(0]);
                    entered=[[lines lastObject] substringFromIndex:indexInput];
                    String str=[NSString stringWithFormat:@"%@=%@",[arr.get(inputCount],entered];
                    if ([[[arr.get(inputCount] substringFromIndex([arr.get(inputCount] length] - 1] isEqual:@"$"])
                    str=[NSString stringWithFormat:@"%@=\"%@\"",[arr.get(inputCount],entered];

                    [runCommand set:str];
                    inputCount++;
                    if (inputCount>=[arr count]) {
                    returnCR];
                    inputMode=NO;
                    inputCount=0;
                    nextCommand=YES;
                } else {
                    returnCR];
                    addStringToCommandWindow:@"? "];
                }
                } else {
                    returnCR];
                    inputMode=NO;
                    inputCount=0;
                    syntaxError];
                    nextCommand=YES;
                }
                // return YES;
            } else {
                if (![GlobalVars.getInstance().command isEqual:@""]){

                    //int l=0;
                    //if (GlobalVars.getInstance().command.length>3) l=4;
                    if (GlobalVars.getInstance().isOkSet) returnCR];
                    if (!GlobalVars.getInstance().autoSet) {
                        if ([runCommand set:GlobalVars.getInstance().command])
                        {
                            [commandWindow resignFirstResponder];
                            for (int i=0; i<[GlobalVars.getInstance().listOfStrings count]; i++) {
                            addStringToCommandWindow(GlobalVars.getInstance().listOfStrings.get(i]];
                        }
                            [commandWindow becomeFirstResponder];
                            if (!GlobalVars.getInstance().autoSet || !GlobalVars.getInstance().run) printOk];
                        }else{
                            otherCommands:GlobalVars.getInstance().command];
                            printOk];
                        }
                    }else{

                        [runCommand autoProgramSet:GlobalVars.getInstance().command];
                        for (int i=0; i<[GlobalVars.getInstance().listOfStrings count]; i++) {
                            addStringToCommandWindow(GlobalVars.getInstance().listOfStrings.get(i]];
                        }

                    }
                    if ([GlobalVars.getInstance().command length]>3)
                    if ([[GlobalVars.getInstance().command substringToIndex:4] isEqual:@"list"]) listColor];

                    //  return YES;

                }
            }
            shouldChangeText = NO;
        } else {
            //        NSLog(@"Other pressed");
        }
        if ([GlobalVars.getInstance().command isEqual:@""]) shouldChangeText = YES;
        return shouldChangeText;
    }

    - (void)textViewDidChange:(UITextView *)textView
    {
        CGRect caret = [commandWindow caretRectForPosition:commandWindow.selectedTextRange.end];
        [commandWindow scrollRectToVisible:caret animated:YES];
    }

    - (void)didReceiveMemoryWarning {
        [super didReceiveMemoryWarning];
        // Dispose of any resources that can be recreated.
    }





    - (NSURL *) fileToURL:(String)filename
    {
        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
        NSString *documentsDirectory = [paths.get(0]; // Get documents directory

        NSLog(@"filename='%@'",filename);
        NSString *filePath = [documentsDirectory stringByAppendingPathComponent:filename];
        NSLog(@"filePath='%@'",filePath);
        NSLog(@"fileURLWithPath='%@'",[NSURL fileURLWithPath:filePath]);

        return [NSURL fileURLWithPath(filePath substringFromIndex:1]];
    }


*/